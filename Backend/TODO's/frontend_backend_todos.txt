Frontend Pages → Backend TODOs (mapped)
Generated: 2025-08-22

Instructions: Each section lists only backend tasks required to support the frontend page features. Keep tasks small and actionable; mark as [TODO] when not started.

Home / Landing
- [TODO] GET /api/events/featured — return featured event types and featured venues (paginate)
- [TODO] Endpoint to fetch hero banner content / promo data
- [TODO] Seed script to populate featured venues and event types

Auth (Login / Register)
- [TODO] POST /api/auth/register — create account, send verification email
- [TODO] POST /api/auth/login — validate credentials, return access + refresh tokens
- [TODO] POST /api/auth/google — accept Google token, validate with provider, create/return user
- [TODO] POST /api/auth/forgot-password — send password reset email
- [TODO] POST /api/auth/reset-password — verify token and set new password
- [TODO] Middleware: auth guard, attach user to req

Dashboard
- [TODO] GET /api/users/:id/summary — recent bookings, favorites count, quick stats
- [TODO] GET /api/bookings/user/:userId?limit=5 — recent bookings for dashboard
- [TODO] POST /api/users/:id/favorites — toggle saved venue

Event Types / Categories
- [TODO] GET /api/events/types — list all event types
- [TODO] POST /api/events/types — create type (admin)
- [TODO] PUT /api/events/types/:id — update type (admin)
- [TODO] DELETE /api/events/types/:id — delete type (admin)
- [TODO] Seeder to populate default event types with images/icons

Search / Discover
- [TODO] GET /api/venues/search — text + filters + pagination + sorting
- [TODO] GET /api/search/suggestions?q= — lightweight suggestions endpoint
- [TODO] Implement text index (Elasticsearch / Postgres full-text / Mongo text)
- [TODO] Geo search support: /api/venues/search?lat=&lng=&radius=

Venue Results / Listing
- [TODO] GET /api/venues — list with filters (eventType, capacity, price), pagination
- [TODO] GET /api/venues/:id — venue details (includes host/vendor summary and images URLs)
- [TODO] POST /api/venues — create venue (vendor)
- [TODO] PUT /api/venues/:id — update venue (owner/admin)
- [TODO] DELETE /api/venues/:id — delete venue (owner/admin)
- [TODO] Endpoint to return map markers for list view

Venue Detail
- [TODO] GET /api/venues/:id/media — return image/video signed URLs or CDN links
- [TODO] GET /api/venues/:id/availability?from=&to= — availability calendar data
- [TODO] GET /api/venues/:id/amenities — list amenities and availability constraints

Booking / Checkout
- [TODO] POST /api/bookings — create booking (validate availability, create pending booking)
- [TODO] GET /api/bookings/:id — booking details
- [TODO] GET /api/bookings/user/:userId — user bookings list
- [TODO] PUT /api/bookings/:id — update booking (apply cancellation rules)
- [TODO] DELETE /api/bookings/:id — cancel booking (refund workflow if paid)
- [TODO] Background job: lock/unlock availability slots, expire unpaid pending bookings

Payments
- [TODO] POST /api/payments/create-intent — create payment intent / order with provider
- [TODO] POST /api/payments/confirm — optional explicit confirmation endpoint
- [TODO] POST /api/payments/webhook — handle provider webhooks: payment_succeeded, payment_failed, refund
- [TODO] POST /api/refunds — request refund (admin/vendor flow)
- [TODO] Persist payment attempts, idempotency, and reconciliations

User Profile
- [TODO] GET /api/auth/profile — return user profile
- [TODO] PUT /api/auth/profile — update profile info and image reference
- [TODO] GET /api/users/:id/bookings — same as bookings but scoped to profile page
- [TODO] Payment methods endpoint: GET/POST/DELETE /api/users/:id/payment-methods

Vendor Dashboard
- [TODO] POST /api/vendors/register — create vendor profile & request verification
- [TODO] GET /api/vendors/:id/venues — list vendor venues
- [TODO] GET /api/vendors/:id/bookings — bookings for vendor's venues
- [TODO] GET /api/vendors/:id/earnings — payouts & earnings summary
- [TODO] Admin endpoints to approve/reject vendor verification

Admin Dashboard
- [TODO] GET /api/admin/users — list & search users
- [TODO] PUT /api/admin/users/:id/role — change user roles
- [TODO] GET /api/admin/venues — pending approvals and moderation actions
- [TODO] GET /api/admin/analytics — basic revenue/bookings metrics
- [TODO] POST /api/admin/seed — admin-only seed controls (dev/staging)

Reviews & Ratings
- [TODO] POST /api/venues/:id/reviews — submit review (auth)
- [TODO] GET /api/venues/:id/reviews — list reviews with pagination
- [TODO] Admin endpoints to moderate/delete reviews
- [TODO] Recalculate venue average rating after review create/update/delete

Uploads / Media
- [TODO] POST /api/uploads/signed-url — return signed URL for direct upload
- [TODO] POST /api/uploads/complete — notify backend after client upload (optional)
- [TODO] DELETE /api/uploads/:id — remove media (owner/admin)
- [TODO] Background job to garbage-collect orphaned media

Notifications & Emails
- [TODO] POST /api/notifications/send — internal send endpoint (admin)
- [TODO] Triggered emails: registration confirmation, booking confirmation, payment receipt, reminder emails
- [TODO] Scheduler job: send reminders (configurable offsets)
- [TODO] Webhook/callback endpoints for external notification services if used

Payments & Refunds
- [TODO] Invoice generation endpoint (PDF or link)
- [TODO] GET /api/payments/:bookingId/status — current status for frontend polling

Monitoring, Docs & QA
- [TODO] Add OpenAPI/Swagger describing all above endpoints
- [TODO] Create Postman collection with example requests/responses for frontend team
- [TODO] Unit tests for critical flows (auth, bookings, payments)
- [TODO] Integration tests for booking-to-payment-to-confirmation flow

Cross-cutting / Infra
- [TODO] .env.example and secret management guidance
- [TODO] CORS allowlist to include frontend host
- [TODO] Rate limiting and request throttling for public endpoints
- [TODO] Input validation schemas (Zod/Joi) for each public route
- [TODO] Error telemetry (Sentry) and structured logging

MVP priority (minimal set to complete first)
- [TODO] Auth endpoints (register/login/profile)
- [TODO] Event types endpoints + seeder
- [TODO] Venues CRUD + search endpoint
- [TODO] Booking create + availability checks
- [TODO] Payments create-intent + webhook handling
- [TODO] Upload signed-url for venue images
- [TODO] Booking confirmation email

Notes
- Map each TODO to an issue in your tracker and tie to a small acceptance criteria (example: "POST /api/bookings should return 201 and mark slot reserved for 15 minutes").
- If you want, I can scaffold an Express+TS project and add route skeletons for the MVP TODOs.




import { auth } from '../config/firebase'; // adjust path as needed

const user = auth.currentUser;
if (user) {
  const token = await user.getIdToken();
  console.log(token); // This is the JWT you send to your backend
}